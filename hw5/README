The title of the homework and the authorâ€™s name (you)

Comp 15, HW5, Sorting Algorithims
Annamira O'Toole 11/4/16

The purpose of the program

The purpose of this program is to provide an easy to use integer sorting 
tool.  The user can pick between three sorting algorithims, insertion sort,
merge sort, and shell sort.

The files that you provided and a short description of what each
 file is and its purpose

sorter.cpp -- 
sortAlgs.h -- 
sortAlgs.cpp --
Makefile
README

How to compile and run your program

Program is run from the command line with the input:

./sorter sortAlg outputMode [fileName]

where sortAlg = -s1, -s2, -s3  insertion, merge, shell (respectively)
and outputMode = --print or --save
and [filename] is the optional name of the file you wish the program to 
read numbers from

An outline of the data structures and algorithms that you used.
 Given that this is a data structures class, you need to always
 discuss the the data structure that you used and justify why you
 used it. The algorithm overview may not be relevant depending on
 the assignment. For this assignment in addition to describing
 any algorithms that you think are interesting or complicated you
 are required to explain the algorithm of each sorting algorithm
 that you implemented. Make sure to discuss its asymptotic
 run time behaviour (Big O).

Data structure used: STL vector template

Insertion sort: has an average O(n^2) complexity. 
 Each element in the array has to 
be compared with each other element. However that is very simplified, the best
case (an almost sorted array) yields an O( n ) complexity. This is because for
each element being "inserted", if the value you are inserting does not 
require any elements to be slid-over/shifted, the operation takes constant
time. If there are n - 1 calls to insert and each takes constant c time, 
total time is c*(n - 1) = O( n ) not O( n^2 ). Sorts in place.

Merge sort: always has an O(nlogn) complexity. It takes log base 2 of N layers
 to have divided the array completely. Since we are dividing the array in half 
each time; divide in half ^ log base 2 of N = N. 
We have a cost of N on each layer * log N times = O(n*log(n)). Does not sort
in place.

Shell sort: complexity depends on gap sequence, best case O(nlogn), worst
case O(n^2). Each pass leaves the array "more sorted" than before, so that
the last pass, essentially insertion sort does not have to do many 
"inserts"/shifts and takes very little time compared to insertion sort itself.

Details and an explanation of how you tested the various parts
 of your classes and the program as a whole. You may reference
 the testing files that you submitted to aid in your explanation.

I first wrote the sorter.cpp code and all code to deal with the user input,
 so I would be able to use it to test manually, in the shoes of the user. This
 includes my print and save functions and the readStream function that reads
 cin or the user's file and returns a vector.  I then moved on to writing my 
sorting algorithims one by one.  Additionally, 
I wrote several tests with small lists of integers input to my insertionSort,
mergeSort, and shellSort functions that I could print out
to check the success of my sorting algorithims.